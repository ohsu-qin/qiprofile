// The image controls are organized into accordion groups.
.qi-panel.qi-vol-ctl
  uib-accordion(close-others='false')
    div(ng-controller='AccordionGroupCtrl')
      uib-accordian-group(is-open="isOpen")
        +accordion-heading('Overlay')
        // The overlay opacity control.
        // Note: This control has been modified to interact with the
        //   Cornerstone demo image overlay.
        //
        // TO DO - Adapt the controls for selecting slices.
        //
        // TO DO - Adapt the controls for selecting the time point.
        .row
          .col-md-3.qi-slider-label Opacity
          .col-md-9
            slider.qi-slider(ng-model='overlayOpacity.setting'
              ng-change="overlayOpacity.style={'opacity':overlayOpacity.setting}"
              floor='0' ceiling='1' step='0.1' precision='1'
            )

        // Note: the label map opacity control definition below works
        // around the following XTK bug:
        // * If the XTK volume labelmap property is accessed, then the
        //   XTK parser fails with the error:
        //     TypeError: Cannot read property '_children' of undefined
        //   XTK creates an incomplete labelmap object on demand in the
        //   labelmap getter. The XTK hasLabelMap variable is then set to
        //   true, and the parser assumes that the labelmap exists and is
        //   well-formed with children objects. This causes the parser to
        //   fail.
        //
        //   The work-around is to reference @volume._labelmap rather than
        //   the @volume.labelmap property. The Image object
        //   isOverlaySelected function checks whether the labelmap exists
        //   without accessing the labelmap property. E.g., rather than
        //   calling the expression:
        //     .row(ng-show="image.xtkVolume.labelmap.file")  # Bad!
        //   call the following instead:
        //     .row(ng-show="image.isOverlaySelected()")
        //
        // Note: including the following row:
        //   slider.qi-slider(ng-model='image.xtkVolume.labelmap.opacity' ...)
        // results in the error described above, since it references the
        // labelmap property.
        //
        // Note: including the following row:
        //   slider.qi-slider(ng-model='image.xtkVolume._labelmap.opacity' ...)
        // results in an empty image display but no error. This possibly
        // results from Angular rather than XTK: if the model evaluates
        // to null, then perhaps Angular chokes even if the show flag is
        // false.
        //
        // Note: an alternative work-around is to define the slider model
        // as:
        //   slider.qi-slider(ng-model='image.labelMapOpacity' ...)
        // where the Image service labelMapOpacity property is defined by:
        //   Object.defineProperty image, 'labelMapOpacity',
        //     get: ->
        //       @volume._labelmap.opacity if @isOverlaySelected()
        //     set: (value) ->
        //       @volume._labelmap.opacity = value if @isOverlaySelected()
        // However, this results in an infinite Angular digest loop.
        // Referencing the labelMapOpacity property apparently triggers a
        // redigest for an unknown reason.
        //
        // The work-around is to guard the row with a ng-switch
        // isOverlaySelected() test. If the image has a label map, then
        // Angular inserts the row into the DOM. Otherwise, the row is not
        // in the DOM. This differs from the ng-show behavior: whether or
        // not the ng-show evaluates to true, the row is in the DOM and
        // digested by Angular, resulting in the errors described above.
        //
        // Although the ng-show below is redundant, it is included since
        // it is the preferred implementation if the XTK bug is ever
        // fixed.
        //
        // TODO - revisit this work-around in late 2015 after XTK has
        // hopefully matured.
        //
        //div(ng-switch="image.isOverlaySelected()")
        // See the Note comments above for an explanation of the odd
        // switch-show redundancy below.
        //  div(ng-switch-when="true")
        //    .row(ng-show="image.isOverlaySelected()")
        //      .col-md-3 Overlay
        //      .col-md-9
        //        slider.qi-slider(ng-model="image.xtkVolume.labelmap.opacity"
        //                         floor='0' ceiling='1' step='0.1'
        //                         precision='1')
    div(ng-controller='AccordionGroupCtrl')
      uib-accordion-group(is-open="isOpen")
        +accordion-heading('Cross Section')
        // The axis cross section (slice) controls.
        .row
          .col-md-3.qi-slider-label Sagittal
          .col-md-9
            slider.qi-slider(ng-model="image.xtkVolume.indexX"
                             floor='0' ceiling='319' step='1')
        .row
          .col-md-3.qi-slider-label Coronal
          .col-md-9
            slider.qi-slider(ng-model="image.xtkVolume.indexY"
                             floor='0' ceiling='319' step='1')
        .row
          .col-md-3.qi-slider-label Axial
          .col-md-9
            slider.qi-slider(ng-model="image.xtkVolume.indexZ"
                             floor='0' ceiling='118' step='1')
    div(ng-controller='AccordionGroupCtrl')
      uib-accordion-group(is-open="isOpen")
        +accordion-heading('Threshold')
        // The thresholding controls.
        .row
          .col-md-3.qi-slider-label Lower
          .col-md-9
            slider.qi-slider(ng-model="image.xtkVolume.lowerThreshold"
                             floor='0' ceiling='445' step='1')
        .row
          .col-md-3.qi-slider-label Upper
          .col-md-9
            slider.qi-slider(ng-model="image.xtkVolume.upperThreshold"
                             floor='0' ceiling='445' step='1')
