// TODO - see volume-display TODO. Retain this file on a branch
//   and delete from master.
//
// TODO - shouldn't the divs be inside the uib-accordion-group?
//
// The image controls are organized into accordion groups.
.qi-panel.qi-volume-display-ctrl
  uib-accordion(close-others='false')
    div(ng-controller='AccordionGroupCtrl')
      uib-accordion-group(is-open="isOpen")
        //
        // TODO - this is a volume control rather than a time series
        //   control. The time series does not change. The title
        //   should be 'Time Point' and the model should be volume.
        // 
        +accordion-heading('Time Series')
        // The time series control.
        .row
          .col-md-12
            slider.qi-slider(ng-model="timeSeries"
                             floor='1' ceiling='32' step='1')
    div(ng-controller='AccordionGroupCtrl')
      uib-accordion-group(is-open="isOpen")
        +accordion-heading('Slices')
        // The axis cross section (slice) controls.
        .row
          .col-md-3.qi-slider-label Sagittal
          .col-md-9
            // TODO - watch the slice directly. Don't need to
            //   wrap it in a saggitalView object in the controller. 
            slider.qi-slider(ng-model="saggitalView.slice"
                             floor='0' ceiling='1' step='1')
        .row   
          .col-md-3.qi-slider-label Coronal
          .col-md-9
            slider.qi-slider(ng-model="sliceY"
                             floor='0' ceiling='319' step='1')
        .row
          .col-md-3.qi-slider-label Axial
          .col-md-9
            slider.qi-slider(ng-model="sliceZ"
                             floor='0' ceiling='118' step='1')
    div(ng-controller='AccordionGroupCtrl')
      uib-accordion-group(is-open="isOpen")
        +accordion-heading('Opacity')
        // The overlay opacity control.
        // Note: This control has been modified to interact with the
        //   Cornerstone prototype image overlay.
        .row
          .col-md-3.qi-slider-label Overlay
          .col-md-9
            slider.qi-slider(ng-model='overlayConfig.setting'
              ng-change="overlayConfig.style['opacity']=overlayConfig.setting"
              floor='0' ceiling='1' step='0.1' precision='1'
            )

        // Note: the label map opacity control definition below works
        // around the following XTK bug:
        // * If the XTK volume labelmap property is accessed, then the
        //   XTK parser fails with the error:
        //     TypeError: Cannot read property '_children' of undefined
        //   XTK creates an incomplete labelmap object on demand in the
        //   labelmap getter. The XTK hasLabelMap variable is then set to
        //   true, and the parser assumes that the labelmap exists and is
        //   well-formed with children objects. This causes the parser to
        //   fail.
        //
        //   The work-around is to reference @volume._labelmap rather than
        //   the @volume.labelmap property. The Image object
        //   isOverlaySelected function checks whether the labelmap exists
        //   without accessing the labelmap property. E.g., rather than
        //   calling the expression:
        //     .row(ng-show="volume.xtkVolume.labelmap.file")  # Bad!
        //   call the following instead:
        //     .row(ng-show="volume.isOverlaySelected()")
        //
        // Note: including the following row:
        //   slider.qi-slider(ng-model='volume.xtkVolume.labelmap.opacity' ...)
        // results in the error described above, since it references the
        // labelmap property.
        //
        // Note: including the following row:
        //   slider.qi-slider(ng-model='volume.xtkVolume._labelmap.opacity' ...)
        // results in an empty image display but no error. This possibly
        // results from Angular rather than XTK: if the model evaluates
        // to null, then perhaps Angular chokes even if the show flag is
        // false.
        //
        // Note: an alternative work-around is to define the slider model
        // as:
        //   slider.qi-slider(ng-model='volume.labelMapOpacity' ...)
        // where the Image service labelMapOpacity property is defined by:
        //   Object.defineProperty image, 'labelMapOpacity',
        //     get: ->
        //       @volume._labelmap.opacity if @isOverlaySelected()
        //     set: (value) ->
        //       @volume._labelmap.opacity = value if @isOverlaySelected()
        // However, this results in an infinite Angular digest loop.
        // Referencing the labelMapOpacity property apparently triggers a
        // redigest for an unknown reason.
        //
        // The work-around is to guard the row with a ng-switch
        // isOverlaySelected() test. If the image has a label map, then
        // Angular inserts the row into the DOM. Otherwise, the row is not
        // in the DOM. This differs from the ng-show behavior: whether or
        // not the ng-show evaluates to true, the row is in the DOM and
        // digested by Angular, resulting in the errors described above.
        //
        // Although the ng-show below is redundant, it is included since
        // it is the preferred implementation if the XTK bug is ever
        // fixed.
        //
        // TODO - revisit this work-around in late 2015 after XTK has
        // hopefully matured.
        //
        //div(ng-switch="volume.isOverlaySelected()")
        // See the Note comments above for an explanation of the odd
        // switch-show redundancy below.
        //  div(ng-switch-when="true")
        //    .row(ng-show="volume.isOverlaySelected()")
        //      .col-md-3 Overlay
        //      .col-md-9
        //        slider.qi-slider(ng-model="volume.xtkVolume.labelmap.opacity"
        //                         floor='0' ceiling='1' step='0.1'
        //                         precision='1')
        //
            div(ng-controller='AccordionGroupCtrl')
              uib-accordion-group(is-open="isOpen")
                +accordion-heading('Cross Section')
                .row
                  .col-md-3.qi-slider-label Sagittal
                  .col-md-9
                    slider.qi-slider(ng-model="volume.xtkVolume.indexX"
                                     floor='0' ceiling='319' step='1')
                .row
                  .col-md-3.qi-slider-label Coronal
                  .col-md-9
                    slider.qi-slider(ng-model="volume.xtkVolume.indexY"
                                     floor='0' ceiling='319' step='1')
                .row
                  .col-md-3.qi-slider-label Axial
                  .col-md-9
                    slider.qi-slider(ng-model="volume.xtkVolume.indexZ"
                                     floor='0' ceiling='118' step='1')
            div(ng-controller='AccordionGroupCtrl')
              uib-accordion-group(is-open="isOpen")
                +accordion-heading('Threshold')
                .row
                  .col-md-3.qi-slider-label Lower
                  .col-md-9
                    slider.qi-slider(ng-model="volume.xtkVolume.lowerThreshold"
                                     floor='0' ceiling='445' step='1')
                .row
                  .col-md-3.qi-slider-label Upper
                  .col-md-9
                    slider.qi-slider(ng-model="volume.xtkVolume.upperThreshold"
                                     floor='0' ceiling='445' step='1')
        //
